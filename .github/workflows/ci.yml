name: Django CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # --------------------------
  # Continuous Integration (CI)
  # --------------------------
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U testuser"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      SECRET_KEY: dummysecretkeyforci
      DEBUG: "True"
      DATABASE_URL: postgres://testuser:testpass@localhost:5432/test_db
      DJANGO_SETTINGS_MODULE: online_poll_system.settings
      PYTHONUNBUFFERED: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations & tests
        run: |
          python manage.py migrate
          python manage.py test

  # --------------------------
  # Build & Push Docker Image
  # --------------------------
  docker:
    runs-on: ubuntu-latest
    needs: test   # only runs if tests pass

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: akinscoded/online_poll_system:latest

      - name: Cleanup workspace
        if: always()
        run: docker system prune -af
